apply plugin: "maven-publish"
apply plugin: "fabric-loom"
apply plugin: "io.github.juuxel.loom-quiltflower"
apply plugin: "com.replaymod.preprocess"

int mcVersion = 1

preprocess {
    mcVersion = vars.get()["MC"]
    tabIndentation = false
}

repositories {
    maven {
        url 'https://www.cursemaven.com/'
    }
    maven {
        url = "https://api.modrinth.com/maven"
    }
    maven {
        url 'https://maven.hendrixshen.top'
    }
    mavenCentral()
    mavenLocal()
}

static String getMagiclibCompatName(String minecraftVersion) {
    String ret = minecraftVersion.replace(".", "_")
    int idx = ret.lastIndexOf("_")
    if (idx == -1) {
        return ""
    }
    if (idx != 1) {
        ret = ret.substring(0, idx)
    }
    return ret
}


dependencies {
    minecraft("com.mojang:minecraft:${project.minecraft_version}")
    mappings(loom.officialMojangMappings())

    modImplementation("curse.maven:minihud-244260:${project.minihud_version}")
    modImplementation("curse.maven:tweakeroo-297344:${project.tweakeroo_version}")
    modImplementation("curse.maven:litematica-308892:${project.litematica_version}")
    modImplementation("curse.maven:itemscroller-242064:${project.itemscroller_version}")

    if (project.minecraft_version != "1.15.2" &&
            project.minecraft_version != "1.14.4") {
        modImplementation("net.earthcomputer.multiconnect:multiconnect-api:${project.multiconnect_version}") {
            transitive = false
        }
        include("net.earthcomputer.multiconnect:multiconnect-api:${project.multiconnect_version}")
    }

    modImplementation("top.hendrixshen:magiclib:${project.minecraft_version}-${project.magiclib_version}")
}

loom {
//    mixin {
//        // 如果使用 Legacy Mixin Ap，有时候 Mixin class remap 会有问题，该 remap 的不 remap
//        useLegacyMixinAp = false
//    }
    runConfigs.all {
        // to make sure it generates all "Minecraft Client (:subproject_name)" applications
        ideConfigGenerated = true
        property("mixin.debug.export", "true")
        runDir "../../run"
    }
}

remapJar {
    remapperIsolation = true
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8
String realVersion = "${project.mod_version}"

if (project.pre_release != "") {
    realVersion += "-${project.pre_release}+"
    realVersion += grgit.head().abbreviatedId
}

archivesBaseName = project.archives_base_name + "-" + project.minecraft_version
version = realVersion
group = project.maven_group

processResources {
    inputs.property("version", version)
    filesMatching("fabric.mod.json") {
        expand(["mod_version"         : project.version,
                "mod_id"              : project.mod_id,
                "mod_name"            : project.mod_name,
                "mod_homepage"        : project.mod_homepage,
                "mod_sources"         : project.mod_sources,
                "mod_license"         : project.mod_license,
                "minecraft_dependency": project.minecraft_dependency,
        ])
    }
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

java {
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from("../../LICENSE") {
        rename { "${it}_${project.archives_base_name}" }
    }
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    // select the repositories you want to publish to
    repositories {
        // uncomment to publish to the local maven
        // mavenLocal()
    }
}
